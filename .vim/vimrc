""" Vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()
" Plugins
Plugin 'gmarik/Vundle.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'Valloric/YouCompleteMe'
Plugin 'kien/ctrlp.vim'

""" Settings
filetype plugin indent on
syntax enable

colorscheme desert
set t_Co=256
set bg=dark

set autoindent
set smartindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set number
set mouse=a
set incsearch
set ignorecase
set smartcase
set hlsearch

set nojoinspaces
set modeline
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<  " :set list to show whitespace
set wrap
set linebreak
set nrformats=octal,hex,alpha

set tabpagemax=100
set scrolloff=3
set statusline=%<%F%(\ %h%m%r%w%)\ [%Y\ %{&ff}]%=%b\ 0x%B\ \ %-17.(%l/%L,%c%V%)%P\ %<
set rulerformat=%20(%-17.(%M%l/%L,%c%V%)%P%)%<
set showcmd

" Use bg=dark when using vimdiff
if &diff
    set bg=dark
endif

" Set noexpandtab when file uses tabs for indents
function Kees_settabs()
    if len(filter(getbufline(winbufnr(0), 1, 1000), 'v:val =~ "\\t"')) > len(filter(getbufline(winbufnr(0), 1, 1000), 'v:val =~ "    "'))
        setlocal noet sts=0
    endif
endfunction
autocmd BufReadPost * call Kees_settabs()

" Makefile sanity - always use tabs in makefiles and debian/rules
autocmd BufEnter Makefile* setlocal noet sts=0
autocmd BufEnter */debian/rules setlocal noet sts=0

autocmd FileType ruby set sts=2 ts=2 sw=2

""" Key bindings

" Copy and paste
set pastetoggle=<F10>
vmap <C-c> "+y
map <expr> <C-v> (match(@+, "\n") != -1 ? '"+p' : '"+P')
imap <expr> <C-v> (col('.')-1 == strlen(getline('.')) ? '<C-o>"+p' : '<C-o><C-v>')

" Quit and write
nmap <C-d> :q<CR>
vmap <C-d> <Esc><C-d>
imap <C-d> <C-o><C-d>
nmap <C-e> :w<CR>
vmap <C-e> <Esc><C-e>
imap <C-e> <C-o><C-e>
cnoreabbrev Q q
cnoreabbrev W w

" Remove search highlights and numbers
map  <silent> <C-l> :nohlsearch<CR>
imap <silent> <C-l> <C-o><C-l>
map  <silent> <F12> :set number!<CR>
map! <silent> <F12> <C-o>:set number!<CR>

" Change tab with tab and shift+tab. New tab with ctrl+t
map  <C-t> :tabnew<CR>
imap <C-t> <C-o><C-t>
map  <Tab> :tabnext<CR>
map  <S-Tab> :tabprevious<CR>

" Indent and unindent lines with tab and shift+tab
vmap <silent> <Tab> >gvllllollllo
vmap <silent> <S-Tab> <gvhhhhohhhho
inoremap <S-Tab> <C-d>

" Smart home and end
map  <expr> <Home> (match(getline('.'), '^\s*$') != -1 ? '0' : col('.') == matchend(getline('.'), '^\s*')+1 ? '0'  : '^')
imap        <Home> <C-o><Home>
nmap <expr> <End>  (match(getline('.'), '^\s*$') != -1 ? '$' : col('.') == strlen(getline('.'))             ? 'g_' : '$')
vmap <expr> <End>  (match(getline('.'), '^\s*$') != -1 ? '$' : col('.') == strlen(getline('.'))             ? 'g_' : '$h')
imap        <End>  <C-o><End>

" Shift+up/down on wrapped lines
map <S-Up> gk
imap <S-Up> <C-o><S-Up>
map <S-Down> gj
imap <S-Down> <C-o><S-Down>

" Fix S- and C-motion keys in screen
map  <Esc>[1;2A <S-Up>
map! <Esc>[1;2A <S-Up>
map  <Esc>[1;2B <S-Down>
map! <Esc>[1;2B <S-Down>
map  <Esc>[1;2C <S-Right>
map! <Esc>[1;2C <S-Right>
map  <Esc>[1;2D <S-Left>
map! <Esc>[1;2D <S-Left>
map  <Esc>[1;5A <C-Up>
map! <Esc>[1;5A <C-Up>
map  <Esc>[1;5B <C-Down>
map! <Esc>[1;5B <C-Down>
map  <Esc>[1;5C <C-Right>
map! <Esc>[1;5C <C-Right>
map  <Esc>[1;5D <C-Left>
map! <Esc>[1;5D <C-Left>
map  <Esc>[Z <S-Tab>
map! <Esc>[Z <S-Tab>

""" Plugin settings

" NERDCommenter
let mapleader=","
map <Esc>c ,c<Space>
" Let NERDCommenter see the commentstring
filetype plugin on
" Use // for comments in C and C++
" Should work but doesn't, issue 33: let NERD_c_alt_style=1
let g:NERDCustomDelimiters = { 'c': { 'left': '//', 'right': '', 'leftAlt': '/*', 'rightAlt': '*/' } }

" Ctrl-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = ''
" Ctrl-P, open tab as default.
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': ['<c-t>'],
  \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
\ }
